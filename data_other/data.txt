

1.   Introduction
 Within the context of the Swiss Personalized Health Network Initiative, a data warehouse (DWH) has been established at the University Hospital Basel (USB) to achieve several goals. From a local point of view, the aim is to integrate the main source systems at the USB, which contain large sets of routine healthcare data, and to provide a routine data hub for research, quality improvement, and reporting purposes. From a national perspective, the DWH of the USB is part of a wider network to support exchange of healthcare data across Switzerland.
Many data requests of USB departments are handled directly by the DWH team at the Division of Research and Analytical Services, Department of Digitalization and Informatics. However, as the complexity of the DWH and the workload for data requests is steadily increasing, the DWH team at the USB provides restricted DWH access rights to selected employees of the USB who are routinely involved in the preparation and provision of USB data for research, quality improvement, and reporting purposes (i.e. power users). This tutorial provides basic information about the DWH of the USB for power users.
2.   What is a Data Warehouse?
 In the healthcare setting, a DWH is a specialized information system that consolidates data from manifold clinical source systems to present a unified view. It is specifically designed to allow efficient integration and analysis of routine data within single healthcare institutions or larger networks. In order to achieve this, a DWH typically runs three tasks that are commonly referred to as ETL (Extract, Transform, Load). Firstly, the original data is extracted from databases of individual applications. This is typically done periodically, e.g. every 24 hours. Secondly, the data is transformed into the desired format and structure, which can include enrichment, conversion, aggregation etc. of data — depending on the source system and the target format. Thirdly, the resulting data from diverse sources are loaded into a single database system where it can be accessed for analysis.
3.   Why is a Data Warehouse Necessary?
In the USB, there are more than hundred software applications for specialized healthcare and business processes. The majority of applications have their own associated databases. Importantly, the data structures used by distinct applications can vary widely depending on the specific user requirements. The needs of analysts and researchers are rarely a priority in the design of such applications. For data structuring and data retrieval, some software vendors provide minimal support and documentation, which complicates the secondary use of such data, e.g. for research purposes. Just because data has been captured electronically and the database is accessible, one cannot assume that these datasets are readily extractable and analyzable.
For many analytical questions, linked data from several sources are necessary. For instance, if you want to understand what medications a patient received during a given USB hospital stay, these data are recorded in multiple applications depending on the ward and sometimes the type of drug (MEONA for regular patient wards, METAVISION for intensive care units, CATO for chemotherapies, COPRA for drugs applied in the operating room etc.). Every software has its own data structure and uses sometimes distinct keys to identify patients or other identities. This heterogeneity needs to be unified before meaningful analysis across applications can be performed. To integrate all this information, even for an apparently simple task like medication analysis, can be complex and time-consuming. User needs, the software landscape, descriptive data, etc. change over time and these changes need to be accounted for in a transparent and reproducible manner. Therefore, to allow efficient hospital-wide analyses in an institution with a diverse software environment like in the USB, data should be integrated and made accessible in a single information system, such as a DWH.
4.   Key Considerations
 Several points should be emphasized when working with the DWH of the USB:
 The DWH cannot correct data quality issues, inconsistencies and missing data of specific source systems. It can be seen as a “mirror” of the routine data stored in source systems such as MEONA or ISMed. This means that the DWH does not harbor cleaned datasets. You may therefore have to invest considerable time to check and clean your data obtained with specific DWH queries. Working with routine (healthcare) data is “messy”; the DWH per se is not a research database. Please note that our DWH team is not responsible for the content and accuracy of single source systems.
Clinical software is certified for clinical use. This certification is not valid for the data we provide via DWH views, as this data may undergo multiple transformations. Therefore, the DWH of the USB does not fulfil the legal requirements for clinical use. Data from the DWH are under no circumstances cleared to guide clinical decisions.
The DWH is not updated in real-time; it is only updated every 24 hours. This implies that you will not find very recent findings (e.g. laboratory values) in the DWH. Our DWH is not considered a critical infrastructure that has to be available to its users at all times. Therefore, the DWH should not be used for critical operational processes.
Some routine data elements and coding practices may change over time (e.g. ICD and CHOP codes). It may therefore be important to longitudinally explore your cohort and specific data elements prior to any final data export. ICD and CHOP codes are limited and produced mainly for billing purposes of inpatient cases: They may not reflect all medical diagnoses and interventions of a single patient.
Application-specific questions concerning the context of data generation, data quality or details of coding systems used (e.g. the choice of appropriate laboratory analysis codes to answer your study question) should be addressed to the system admin or regular users of the respective application.
 The DWH includes data from USB in- and outpatients that are associated with an episodes of care at USB only. For instance, if a general practitioner sends specimens of a patients to the USB laboratories – even if the patient is a USB patient – this information is not associated with the USB patient ID and is thus not available in the DWH.
The scope of the DWH is constantly being expanded and the data model updated. We follow a monthly release cycle that starts on the first Wednesday of each month. New changes and updates are available for all user after completion of a release cycle. Planned changes are communicated via e-mail at the beginning of each cycle. We aim to reduce changes to existing tables to an absolute minimum so that users’ queries can continue to run without update. However, adaptions are sometimes necessary and it is thus recommended to read all release notes.
5.   Source Systems Included in the Data Warehouse
It is important to have a good understanding of the data elements and source systems, which you will require for your DWH queries. As a daily user of specialized applications, you will know certain source systems much better than the DWH team does. You will find in the DWH what is entered in the source systems if that entity has been included in the DWH data model. However, information that is not stored in a structured format in a database (e.g. discharge reports in PDF format) cannot be queried in a straightforward manner.
Each DWH table is explained in our model documentation. Not all content of each USB application is available in the DWH but the content is continuously being expanded. The main USB sources include the following systems:
SAP: General administrative and billing applications
Available e.g. patient demographics and contact information, patient cases and in-hospital movements, general research consent, ICD diagnoses coded for billing purposes, CHOP procedures
MEONA: Clinical information system and patient charts used on non-intensive care units, increasingly replacing ISMed
Available e.g. patient decisions, vital parameters, medication orders and applications (ATC codes)
METAVISION: Clinical information system and patient charts used on intensive care units
Available e.g. vital parameters, medication applications (ATC codes)
CATO: Medication planning and documentation system for (oncological) chemotherapy
Available e.g.  medication orders and applications (ATC codes) for chemotherapy protocols
ISMed: Clinical information system, being replaced by MEONA
Available e.g. mainly free text information (e.g. diagnosis lists) as entered in clinical routine
ISOP: operation organization and descriptive data for operations
Available e.g. dates of operation, associated time stamps, involved anesthesiologists and surgeons, free text descriptions of the operation performed
xLAB: laboratory data (other than for microbiology)
Available e.g. results and units, reference ranges, laboratory methods, associated timestamps
mLAB: laboratory data (microbiology)
Available e.g. results and units, reference ranges, laboratory methods, associated timestamps
PATHOWIN: Pathology information system
Available e.g. pathology department data including orders, samples, blocks, reports, associated timestamps
6.   Database Model and Naming Conventions
 DWH data is modelled according to the principles of dimensional (also “star-schema”) modelling, which is a standard approach utilized in data warehousing. The data representation rests on two types of tables: facts and dimensions. In a fact table, each row represents an individual, unaggregated observation of the highest granularity (e.g. a systolic blood pressure measurement, a glucose measurement or an individual dose of a medication given) to allow flexible analyses. Dimension tables represent descriptive data characterizing the context of facts (e.g. methodologies/units used for laboratory measurements, details regarding the pharmaceutical product given or the responsible employee). Facts are linked to dimensions via foreign key variables (termed “business keys” or “_bk”) and join operations in SQL.
 For example, “V_IL_FCT_MEDI_APPL_MEONA” (see naming conventions below) stores facts concerning medication applications of the software MEONA. The specific pharmaceutical product applied is identified by the column “MED_BK” which is the key to the dimension table “V_IL_DIM_MEDI”, where detailed information regarding pharmaceutical products are stored. The relationships between tables are specified in our DWH model documentation.
Table/View Naming Conventions
Abbreviation
Description
V_
View
_IL_
Integration layer (finally modelled version)
_TZ_
Transformation zone (technical stage)
_DIM_
Dimension
_FCT_
Fact
_CID
Applies only for “_DIM_”: only the current version of each dimension (including early arrives and deleted dimensions)
_CUR
Applies only for “_DIM_ “: only the current version of each dimension (excluding early arrives and deleted dimensions)
Examples:
Dimension view:
V_IL_DIM_PATIENT_CUR: This denotes a view on the integration layer for the dimension “patient”, with the “_CUR” selection criteria applied. The content of the view is expressed with the term after “DIM_”.

Fact view:
V_IL_FCT_MEDI_APPL_MEONA: This denotes a view on the integration layer for the facts of the entity “MEDI_APPL” (medication application). In case there are multiple fact tables for an entity, this is followed by a suffix denoting the name of the software where data are sourced from – in this case MEONA.

Column Naming Conventions
Individual column descriptions for each table are available in the DWH model documentation. A column name is typically constructed with a 3-letter prefix of the table, an abbreviation of its content description, followed by a suffix denoting the type of content. Several important abbreviations are explained in the following table:
Column Abbreviations
Abbreviation
Description
_BK
Business key: Identifier keys. _BKs are used as primary/secondary keys for table joins.
_NK
Natural key; individual components of a composite _BK (i.e. concatenation of multiple values) in the same table

_SID
Surrogate ID (unique identifier for a dimension and its version)
DWH_
Technical variables generated and used by the data warehousing process
PAT_BK
Patient ID (“Patientennummer”) – present in all FCT Tables
CAS_BK
Case ID (“Fallnummer”) – present in all FCT Tables
_TS
Timestamp: a point in time described by date and time
_DAY_BK
Date (in format YYYYMMDD), reference to V_IL_DIM_DAY
_TIM_BK
Time (in format hh:mm:ss), reference to V_IL_DIM_TIME
Examples:
 In v_il_dim_case (view of episodes of care/ “Fälle”):
cas_start_date_ts: the start of a case (as timestamp)
cas_end_date_ts: the end of case (as timestamp)
cas_type: the type of a case (i.e. outpatient vs. inpatient)
cas_admission_dept_org_bk: the ID code of the department who admitted the patient, a reference to organization unit table “V_IL_DIM_ORG”
CAS_DISCHARGE_TYPE: the type of discharge (e.g. to home or another hospital)

V_IL_FCT_MEDI_APPL_MEONA (medication applications in MEONA):
MAP_BK: the unique identifier of a medication application
MAP_START_DATE_TS: the point in time where the medication applications has happened
MAP_APPLICANT_EMP_BK: the employee identifier who logged the medication application, reference to the table “V_IL_DIM_EMPLOYEE”
ATC_BK: the ATC Code of the medication applied, also a reference to the ATC code dimension table
roa_meona_bk: the code of the route of access (e.g. oral or intravenous) a medication has been applied, reference to the table “v_il_dim_roa_meona”
A particular property of a DWH is the ability to trace changes of dimensional data over time (historization). For instance, a patient’s administrative data are modelled in a dimension table “V_IL_DIM_PATIENT”. If the patient reports an address change to the hospital, the new address will be entered in the administrative application to reflect the current address in the database. A researcher could now have multiple types of goals; for instance, (1) you want to send a subject a questionnaire for follow-up data collection or (2) you want to study retrospectively an association of a laboratory parameter with the place of residence. In case (1), you will need the most current address, whereas in case (2) you will be interested in the address where the subject lived at the time when the laboratory parameter was measured. The timestamp variables “DWH_VALID_FROM” and “DWH_VALID_TO” indicate the timeframe, in which a row of a “_BK” in a dimensional table is/was valid. This facilitates joining on a date or timestamp in addition to the _BK of the dimension. In case there is exactly one row per _BK (i.e. no recorded changes to a dimension), this range is set to be from “1.1.1900” to “31.12.9999”.
Integrity of the data (i.e. a possible inner join to a dimensional table for each observation in a _FCT table) has to be assured in a DWH, even when the current data in the primary systems do not reflect that integrity. Changes to dimensional data have to be reflected in the DWH even when the dimensional data has been deleted in the current source data system at some point in time. Otherwise, you could not have relevant dimensions available for facts that have been recorded before the deletion. Additionally, the situation can arise when a source system contains a fact with an associated dimension that is not (yet) represented in the source table used by the DWH for the relevant dimension table (typically a result of issues in the hospital processes/application). If you apply an (inner) JOIN between this fact and the dimension table, you will lose/ignore this observation. To account for this problem, a dummy record called an “early arrive” with that respective _BK is created in the dimension table. The describing dimensional data are set to “n.a.” or “-1” in these cases, indicating the issue in the data resulting from such a query.
In each dimension table, you will find three dummy variables (values either 0 or 1):
DWH_IS_CURRENT: the most current version of a dimensional _BK
DWH_IS_DELETED: this version of the _BK has been deleted in the source system
DWH_IS_EARLY_ARRIVE.: this version of the _BK is an “early arrive”
To facilitate working with dimensional tables according to your analytical problem, you will find three views available for each dimensional table, differentiated by their suffix. “_CID” and “_CUR” limit the dimensional data to relevant combinations of these three dummy variables:

_CID and _CUR Conditions
View (example)
Conditions
Description
V_IL_DIM_PATIENT
No restriction
Contains all recorded versions of a dimension.
V_IL_DIM_PATIENT_CID

dwh_is_current = 1
Contains only the current/most recent version of a dimension (however this can be deleted or an “early arrive”).
V_IL_DIM_PATIENT_CUR
dwh_is_current = 1
dwh_is_deleted = 0
dwh_is_early_arrive = 0
Contains only the current/most recent version of a dimension and omits deleted and early arrives.
 The choice of one of this type of views to solve a specific analytical problem depends largely on the question asked. Deleted and “early arrive” dimensional records may or may not be of relevance for the subset of data you are interested in.
In general, we suggest using the “_CUR” view if you e.g. want to count ‘true' records from a Dimension: E.g. you want to create a subset Cases (Fälle) from IL_DIM_CASE that are inpatient ('stationär) in order to count their amount by year. Here you would query

SELECT * FROM CDWH.V_IL_DIM_CASE_CUR WHERE CAS_TYPE='stationär';
However, if you treat the dimension truly in order to inner join dimensional attributes to a fact table (which is the classic case dimensions are used for), you would use the “_CID” view. If you chose the “_CUR” view for the inner join, all records with a case that has been deleted in the meantime (they could have been valid in the past) or that are “early arrive” would not appear in the query result - i.e. referential integrity is not fullfilled. Thus, use the “_CID” view generally if you join a fact to a dimension in order to keep the number of records equal as without the join. There might however be a need to handle those results that are a early arrive in the dimension table.

SELECT b.cas_type, count(*)
FROM CDWH.V_IL_FCT_LABOR_GERM_RESULT_MLAB a
JOIN CDWH.V_IL_DIM_CASE_CID b ON a.CAS_BK = b.CAS_BK
GROUP BY b.cas_type;
 Further details regarding technical aspects of data warehousing are out of scope of this short tutorial. You find many resources on dimensional modelling online. For an in-depth introduction, we recommend Kimball, Ralph, and Margy Ross. 2013. The Data Warehouse Toolkit. 3rd ed. Wiley (available upon request: fabian.franzeckusb.ch).

7.   Step-by-Step Guide for New Power Users
Getting user credentials: You can request access rights to the DWH via cdwh@usb.ch (please provide the following information: USB-mail address, position/department, explanation why a DWH access is necessary).
Please familiarize yourself with the USB regulations on data protection and research data access on the intranet. You are not allowed to export DWH data to private servers/computers or external storage systems (e.g. clouds). Your access to the DWH may be restricted and logged but it remains your reasonability to comply with the regulations of the USB. Violation of these regulations can be sanctioned.
If DWH access is granted, you will receive an e-mail with the login details for the database server.
We recommend to use the database client DBeaver (https://dbeaver.io ; the community edition is freeware). The installation should be possible with a regular user account on USB computers including Windows 10 virtual desktops via the IT helpdesk. If needed, you can directly access the DWH via your preferred statistical software package (e.g. Stata, R, python) by using a Java Database Connectivity (JDBC) or Open Database Connectivity (ODBC) driver/command. There are specific JDBC/ODBC tutorials for most statistical software packages online.
DBeaver is very easy to use, even if you have not worked with database management systems before. On the left side, you find a “database navigator tab”, where you can access single dimension and fact tables. You can open the SQL editor by right-clicking on “ictthdbdwlp1” and choosing “SQL editor”). Each table and variable/attribute is explained in DBeaver if you move your mouse cursor over the relevant field. We recommend to use the different predefined views/view tables, which start with “V_”. You find a full documentation of DBeaver on the DBeaver wiki.
Typically, you are granted access to (i) the database scheme “CDWH”, where you find all the relevant tables/views and (ii) your private scheme (named after your username), where you have privileges to create your own tables, etc. A full technical documentation of the DWH and a wiki can be found on our DWH Confluence page (access upon request).
Queries are run using SQL. A complete reference to SAP HANA SQL is available online. If you are not familiar with SQL, you do not have to panic. Most SQL queries are quite easy to implement and are always structured in the same core syntax. There are many comprehensive tutorials on the internet, which provide a good overview of the SQL language (e.g. the 3-hour ”MySQL tutorial for beginners”).
For analytical purposes, you will use views from the integration layer from schema “CDWH”. By applying the filter “V_IL_*” in DBeaver, you can hide all other content for better overview.
Please do not hesitate to contact the DWH team (cdwh@usb.ch) if something remains unclear or if you want to report possible DWH errors and malfunctions.